// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @unique @default(uuid())
  email     String  @unique
  firstName String?
  lastName  String?
  password  String

  Purchases    Purchase[]
  Transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Admin {
  id        String  @id @unique @default(uuid())
  email     String  @unique
  firstName String?
  lastName  String?
  password  String

  Courses  Course[]
  Balances Balance?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String @id @unique @default(uuid())
  title       String
  description String
  imageURL    String
  price       String

  Purchases    Purchase[]
  Transactions Transaction[]

  createrId String
  creater   Admin  @relation(fields: [createrId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Purchase {
  id            String @id @unique @default(uuid())
  transactionId String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        String @id @unique @default(uuid())
  address   String
  amount    String
  signature String

  courseId String
  course   Course @relation(fields: [courseId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Balance {
  id            String @id @unique @default(uuid())
  pendingAmount String
  lockedAmount  String

  adminId String @unique
  admin   Admin  @relation(fields: [adminId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
